// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  tcNumber     String?       @unique // Turkish ID number
  birthDate    DateTime? // Birth date for users
  phone        String?
  role         UserRole      @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  managedHotel Hotel?        @relation("HotelManager")
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  country     String
  description String?
  imageUrl    String?
  rating      Float?
  managerId   String?  @unique
  manager     User?    @relation("HotelManager", fields: [managerId], references: [id])
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([city])
  @@index([managerId])
}

model Room {
  id           String        @id @default(uuid())
  number       String
  type         String
  price        Float
  capacity     Int
  description  String?
  imageUrl     String?
  status       RoomStatus    @default(AVAILABLE)
  hotelId      String
  hotel        Hotel         @relation(fields: [hotelId], references: [id])
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([hotelId])
  @@index([status])
}

model Reservation {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  roomId          String
  room            Room              @relation(fields: [roomId], references: [id])
  checkIn         DateTime
  checkOut        DateTime
  status          ReservationStatus @default(PENDING)
  totalPrice      Float
  guestCount      Int
  specialRequests String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([roomId])
  @@index([status])
  @@index([checkIn, checkOut])
}

// Database view for hotel summary
model HotelSummary {
  id             String
  name           String
  city           String
  country        String
  rating         Float?
  managerName    String?
  roomCount      Int
  totalRooms     Int
  availableRooms Int

  @@id([id])
}

// Trigger function for logging reservation changes
model ReservationLog {
  id            String   @id @default(uuid())
  reservationId String
  action        String // INSERT, UPDATE, DELETE
  oldStatus     String?
  newStatus     String?
  timestamp     DateTime @default(now())
  userId        String // User who performed the action

  @@index([reservationId])
  @@index([timestamp])
}

// View for user reservations with hotel and room details
model UserReservationView {
  id            String
  userId        String
  userName      String
  userEmail     String
  userTcNumber  String?
  userBirthDate DateTime?
  roomId        String
  roomNumber    String
  roomType      String
  roomPrice     Float
  hotelId       String
  hotelName     String
  hotelCity     String
  checkIn       DateTime
  checkOut      DateTime
  status        ReservationStatus
  totalPrice    Float
  guestCount    Int
  createdAt     DateTime

  @@id([id])
}

// Trigger function for room status updates
model RoomStatusLog {
  id        String     @id @default(uuid())
  roomId    String
  oldStatus RoomStatus
  newStatus RoomStatus
  reason    String // e.g., "RESERVATION_CREATED", "RESERVATION_CANCELLED"
  timestamp DateTime   @default(now())
  userId    String // User who triggered the change

  @@index([roomId])
  @@index([timestamp])
}
